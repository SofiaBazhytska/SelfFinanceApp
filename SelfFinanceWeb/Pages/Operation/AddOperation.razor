@page "/AddOperation"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using SelfFinance.Shared.Dtos.OperationDtos
@using SelfFinance.Shared.Dtos.CategoryDtos
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Add Operation</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (operation == null || categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="operation" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Date:</label>
            <InputDate @bind-Value="operation.Date" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Amount:</label>
            <InputNumber @bind-Value="operation.Amount" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Category:</label>
            <InputSelect @bind-Value="operation.CategoryId" class="form-select">
                <option value="">-- Select Category --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3 form-check">
            <InputCheckbox @bind-Value="operation.IsIncome" class="form-check-input" id="isIncomeCheckbox" />
            <label class="form-check-label" for="isIncomeCheckbox">Income</label>
        </div>

        <div class="mb-3">
            <label>Description:</label>
            <InputTextArea @bind-Value="operation.Description" class="form-control" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    private CreateOperationDto operation;
    private List<DisplayCategoryDto> categories;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<DisplayCategoryDto>>("api/categories");

            operation = new CreateOperationDto
                {
                    Date = DateOnly.FromDateTime(DateTime.Now)
                };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/operations", operation);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/Operations");
            }
            else
            {
                errorMessage = "Create failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating operation: {ex.Message}";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/Operations");
    }
}
