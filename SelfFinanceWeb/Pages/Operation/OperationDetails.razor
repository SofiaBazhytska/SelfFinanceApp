@page "/OperationDetails/{Id:int}"
@using SelfFinance.Shared.Dtos.OperationDtos
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Operation Details</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (operation == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card p-3">
        <p><strong>Date:</strong> @operation.Date.ToShortDateString()</p>
        <p><strong>Amount:</strong> @operation.Amount</p>
        <p><strong>Category:</strong> @operation.CategoryName</p>
        <p><strong>Type:</strong> @operation.TypeName</p>
        <p><strong>Description:</strong> @operation.Description</p>

        <div class="d-flex gap-2 mt-3">
            <button class="btn btn-primary" @onclick="@(() => EditOperation(operation.Id))">Edit</button>
            <button class="btn btn-danger" @onclick="DeleteOperationAsync">Delete</button>
            <button class="btn btn-secondary" @onclick="GoBack">Back to List</button>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private DisplayOperationDto operation;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            operation = await Http.GetFromJsonAsync<DisplayOperationDto>($"api/operations/{Id}");
            if (operation == null)
            {
                errorMessage = "Operation not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading operation: {ex.Message}";
        }
    }

    private void EditOperation(int id)
    {
        Navigation.NavigateTo($"/EditOperation/{id}");
    }

    private async Task DeleteOperationAsync()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/operations/{Id}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/Operations");
            }
            else
            {
                errorMessage = "Failed to delete operation.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting operation: {ex.Message}";
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/Operations");
    }
}
