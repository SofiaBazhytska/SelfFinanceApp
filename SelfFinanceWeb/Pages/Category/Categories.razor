@page "/Categories"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using SelfFinance.Shared.Dtos.CategoryDtos
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Categories</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else if (!categories.Any())
{
    <p>No categories found.</p>
}
else
{
    <button class="btn btn-success mb-3" @onclick="GoToAddCategory">
        <i class="bi bi-plus-circle me-1"></i> Add Category
    </button>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var op in categories)
            {
                <tr>
                    <td>@op.Name</td>
                    <td>@op.TypeName</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="@(() => EditCategory(op.Id))">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteCategoryAsync(op.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DisplayCategoryDto> categories;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<DisplayCategoryDto>>("api/categories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private void EditCategory(int id)
    {
        Navigation.NavigateTo($"/EditCategory/{id}");
    }

    private async Task DeleteCategoryAsync(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/categories/{id}");
            if (response.IsSuccessStatusCode)
            {
                var deleted = categories.FirstOrDefault(c => c.Id == id);
                if (deleted != null)
                {
                    categories.Remove(deleted);
                }
            }
            else
            {
                errorMessage = "Error deleting category.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception deleting category: {ex.Message}";
        }
    }

    private void GoToAddCategory()
    {
        Navigation.NavigateTo("/AddCategory");
    }
}
